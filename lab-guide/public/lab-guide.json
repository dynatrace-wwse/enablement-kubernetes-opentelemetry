[{"id":"1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>During this hands-on training, we’ll learn how to capture logs, traces, and metrics from Kubernetes using OpenTelemetry and ship them to Dynatrace for analysis.  This will demonstrate how to use Dynatrace with OpenTelemetry; without any Dynatrace native components installed on the Kubernetes cluster (Operator, OneAgent, ActiveGate, etc.).</p>\n<h3 id=\"trainingprerequisites\">Training Prerequisites</h3>\n<ul>\n<li>Codespaces Cluster Set Up</li>\n<li>Generate Dynatrace Access Token</li>\n<li>Environment Prep</li>\n<li>Deploy OpenTelemetry Operator</li>\n</ul>","activityList":[{"id":"1.1","name":"Codespaces Cluster Set Up","content":"<h2 id=\"codespacesclustersetup\">Codespaces Cluster Set Up</h2>\n<p>Create a new instance or use an existing instance of the <code>enablement-kubernetes-opentelemetry</code> Codespaces.</p>\n<p><a href=\"https://github.com/dynatrace-wwse/enablement-kubernetes-opentelemetry\">enablement-kubernetes-opentelemetry</a></p>\n<p>Navigate to the Github repository.  Click on <code>Code</code>.  Click on <code>Codespaces</code>.  Click on <code>New with options</code>.</p>\n<p><img src=\"assets/prereq-github_cluster_repo.png\" alt=\"github cluster repo\" /></p>\n<p>Choose the Branch <code>code-spaces</code>.  Choose the Dev Container Configuration <code>Kubernetes in Codespaces</code>.</p>\n<p>Choose a Region near your Dynatrace tenant.</p>\n<p>Choose Machine Type <code>4-core</code>.</p>\n<p><img src=\"assets/prereq-github_cluster_new_codespaces.png\" alt=\"github new codespaces\" /></p>\n<p>Allow the Codespace instance to fully initialize.  It is not ready yet.</p>\n<p><img src=\"assets/prereq-github_codespace_launch.png\" alt=\"github codespace launch\" /></p>\n<p>The Codespace instance will run the post initialization scripts.</p>\n<p><img src=\"assets/prereq-github_codespace_create.png\" alt=\"github codespace \" /></p>\n<p>When the Codespace instance is idle, validate the <code>astronomy-shop</code> pods are running.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n astronomy-shop\n</code></pre>\n<p><img src=\"assets/prereq-github_codespace_ready.png\" alt=\"github codespace ready\" /></p>","activityList":[]},{"id":"1.2","name":"Generate Dynatrace Access Token","content":"<h2 id=\"generatedynatraceaccesstoken\">Generate Dynatrace Access Token</h2>\n<p>Generate a new API access token with the following scopes:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">Ingest events\nIngest logs\nIngest metrics\nIngest OpenTelemetry traces</span>\n</code></pre>\n<p><a href=\"https://docs.dynatrace.com/docs/dynatrace-api/basics/dynatrace-api-authentication#create-token\">See Related Dynatrace API Token Creation Documentation</a></p>\n<p><img src=\"assets/prereq-dt_access_token.png\" alt=\"dt access token\" /></p>","activityList":[]},{"id":"1.3","name":"Environment Prep","content":"<h2 id=\"environmentprep\">Environment Prep</h2>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal set the environment variables:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-builtin-name\">export</span> DT_API_TOKEN={your-api-token}\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>","activityList":[]},{"id":"1.4","name":"Deploy OpenTelemetry Operator","content":"<h2 id=\"deployopentelemetryoperator\">Deploy OpenTelemetry Operator</h2>\n<h3 id=\"validatecurrentworkingdirectory\">Validate current working directory</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">pwd</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>/repos/enablement-kubernetes-opentelemetry</p>\n</blockquote>\n<p>You should find yourself at the base directory of the repository. If not, then navigate to it.</p>\n<h3 id=\"createdynatracenamespace\">Create <code>dynatrace</code> namespace</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create namespace dynatrace\n</code></pre>\n<p>Sample output:</p>\n<pre><code class=\"hljs sh language-sh\">&gt; namespace/dynatrace created\n</code></pre>\n<h3 id=\"createdynatraceotelcoldtapicredentialssecret\">Create <code>dynatrace-otelcol-dt-api-credentials</code> secret</h3>\n<p>The secret holds the API endpoint and API token that OpenTelemetry data will be sent to.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create secret generic dynatrace-otelcol-dt-api-credentials --from-literal=DT_ENDPOINT=<span class=\"hljs-variable\">$DT_ENDPOINT</span> --from-literal=DT_API_TOKEN=<span class=\"hljs-variable\">$DT_API_TOKEN</span> -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<pre><code class=\"hljs sh language-sh\">&gt; secret/dynatrace-otelcol-dt-api-credentials created\n</code></pre>\n<h3 id=\"deploycertmanagerprerequisiteforopentelemetryoperator\">Deploy <code>cert-manager</code>, pre-requisite for <code>opentelemetry-operator</code></h3>\n<p>https://cert-manager.io/docs/installation/</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f cluster-manifests/cert-manager.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/cert-manager created\\\n  customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created\\\n  customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created</p>\n</blockquote>\n<p>Wait 30-60 seconds for cert-manager to finish initializing before continuing.</p>\n<h3 id=\"deployopentelemetryoperator-1\">Deploy <code>opentelemetry-operator</code></h3>\n<p>The OpenTelemetry Operator will deploy and manage the custom resource <code>OpenTelemetryCollector</code> deployed on the cluster.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f cluster-manifests/opentelemetry-operator.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/opentelemetry-operator-system created\\\n  customresourcedefinition.apiextensions.k8s.io/instrumentations.opentelemetry.io created\\\n  customresourcedefinition.apiextensions.k8s.io/opampbridges.opentelemetry.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/opentelemetry-operator-validating-webhook-configuration configured</p>\n</blockquote>\n<p>Wait 30-60 seconds for opentelemetry-operator-controller-manager to finish initializing before continuing.</p>\n<p>Validate that the OpenTelemetry Operator components are running.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n opentelemetry-operator-system\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>opentelemetry-operator-controller-manager-5d746dbd64-rf9st</td>\n<td>2/2</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]}]},{"id":"2","name":"OpenTelemetry Logs","content":"<h2 id=\"opentelemetrylogs\">OpenTelemetry Logs</h2>\n<p>In this lab we'll utilize the OpenTelemetry Collector deployed as a DaemonSet (Node Agent) to collect pod/container logs from a Kubernetes cluster and ship them to Dynatrace.  Additionally, we'll deploy the OpenTelemetry Collector as a Deployment (Gateway) to watch Kubernetes Events from the Cluster and ship them to Dynatrace.</p>\n<p>Lab tasks:</p>\n<ol>\n<li>Deploy OpenTelemetry Collector as a DaemonSet</li>\n<li>Deploy OpenTelemetry Collector as a Deployment</li>\n<li>Configure OpenTelemetry Collector service pipeline for log enrichment</li>\n<li>Query and visualize logs in Dynatrace using DQL</li>\n</ol>\n<p><img src=\"assets/logs-astronomy-shop_logs.png\" alt=\"astronomy-shop logs\" /></p>","activityList":[{"id":"2.1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h3 id=\"importnotebookintodynatrace\">Import Notebook into Dynatrace</h3>\n<p><a href=\"https://github.com/dynatrace-wwse/enablement-kubernetes-opentelemetry/blob/main/lab-modules/opentelemetry-logs/opentelemetry-logs_dt_notebook.json\">Notebook</a></p>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-builtin-name\">export</span> DT_API_TOKEN={your-api-token}\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>\n<h3 id=\"moveintothebasedirectory\">Move into the base directory</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">cd</span> lab-modules/opentelemetry-logs\n</code></pre>","activityList":[]},{"id":"2.2","name":"OpenTelemetry Collector for Logs","content":"<h2 id=\"opentelemetrycollectorforlogs\">OpenTelemetry Collector for Logs</h2>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<h3 id=\"deployopentelemetrycollector\">Deploy OpenTelemetry Collector</h3>\n<h3 id=\"dynatracedistrodaemonsetnodeagent\">Dynatrace Distro - Daemonset (Node Agent)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment#tabgroup--dynatrace-docs--agent</p>\n<p>Pod (and container) logs are written to the filesystem of the Node where the pod is running.  Therefore the Collector must be deployed as a Daemonset to read the log files on the local Node.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-logs</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;daemonset&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-8q8tz</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"filelogreceiver\"><code>filelog</code> receiver</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#filelog-receiver</p>\n<p>The Filelog Receiver tails and parses logs from files. Although it’s not a Kubernetes-specific receiver, it is still the de facto solution for collecting any logs from Kubernetes.  Logs from the Kubernetes Node's filesystem will be read from the Collector running on that Node.  This is why the Collector is deployed as a Daemonset and not a Deployment (or Sidecar).</p>\n<p>The Filelog Receiver is composed of Operators that are chained together to process a log. Each Operator performs a simple responsibility, such as parsing a timestamp or JSON. Configuring a Filelog Receiver is not trivial.  Refer to the documentation for details.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      filelog:\n        ...\n    service:\n      pipelines:\n        logs:\n          receivers: [filelog]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(log.file.path) <span class=\"hljs-keyword\">and</span> isNotNull(log)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, k8s.namespace.name, k8s.pod.name, k8s.container.name, content, log.file.path\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_filelog_receiver.png\" alt=\"dql_filelog_receiver\" /></p>\n<h2 id=\"k8sattributesprocessor\">k8sattributes Processor</h2>\n<h3 id=\"addkubernetesattributeswiththek8sattributesprocessor\">Add Kubernetes Attributes with the <code>k8sattributes</code> Processor</h3>\n<p>The Kubernetes Attributes Processor automatically discovers Kubernetes pods, extracts their metadata, and adds the extracted metadata to spans, metrics, and logs as resource attributes.</p>\n<p>The Kubernetes Attributes Processor is one of the most important components for a collector running in Kubernetes. Any collector receiving application data should use it. Because it adds Kubernetes context to your telemetry, the Kubernetes Attributes Processor lets you correlate your application’s traces, metrics, and logs signals with your Kubernetes telemetry, such as pod metrics and traces.</p>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesobjects\">Create <code>clusterrole</code> with read access to Kubernetes objects</h3>\n<p>Since the processor uses the Kubernetes API, it needs the correct permission to work correctly. For most use cases, you should give the service account running the collector the following permissions via a ClusterRole.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;pods&quot;</span>, <span class=\"hljs-string\">&quot;namespaces&quot;</span>, <span class=\"hljs-string\">&quot;nodes&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;apps&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;extensions&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-logs.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-logs created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-logs-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-logs</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-logs-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-logs-crb created</p>\n</blockquote>\n<h3 id=\"addk8sattributesprocessor\">Add <code>k8sattributes</code> processor</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-attributes-processor</p>\n<p>The <code>k8sattributes</code> processor will query metadata from the cluster about the k8s objects.  The Collector will then marry this metadata to the telemetry.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">k8sattributes:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">&quot;serviceAccount&quot;</span>\n    <span class=\"hljs-attr\">passthrough:</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-attr\">filter:</span>\n        <span class=\"hljs-attr\">node_from_env_var:</span> <span class=\"hljs-string\">KUBE_NODE_NAME</span>\n    <span class=\"hljs-attr\">extract:</span>\n        <span class=\"hljs-attr\">metadata:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.namespace.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.deployment.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.daemonset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.job.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.cronjob.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.replicaset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.statefulset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.node.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.container.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.id</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.tag</span>\n        <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">tag_name:</span> <span class=\"hljs-string\">app.label.component</span>\n            <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">app.kubernetes.io/component</span>\n            <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">pod</span>\n    <span class=\"hljs-attr\">pod_association:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">connection</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-02.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-1\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-dns4x</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace-1\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, k8s.namespace.name, k8s.deployment.name, k8s.pod.name, k8s.container.name, app.label.component, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_k8sattributes_processor.png\" alt=\"dql_k8sattributes_processor\" /></p>\n<h2 id=\"resourcedetectionprocessor\">resourcedetection Processor</h2>\n<p>The resource detection processor can be used to detect resource information from the host, in a format that conforms to the OpenTelemetry resource semantic conventions, and append or override the resource value in telemetry data with this information.  Detectors are available for AWS, Azure, GCP, and several other platforms; see the documentation for more details.</p>\n<p>This processor is a great plugin for adding attributes such as <code>cloud.account.id</code> and <code>k8s.cluster.name</code> to the telemetry.</p>\n<h3 id=\"addresourcedetectionprocessor\">Add <code>resourcedetection</code> processor</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#gcp-metadata</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n  <span class=\"hljs-attr\">resourcedetection/gcp:</span>\n    <span class=\"hljs-attr\">detectors:</span> [<span class=\"hljs-string\">env</span>, <span class=\"hljs-string\">gcp</span>]\n    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">2s</span>\n    <span class=\"hljs-attr\">override:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>note:</strong> for this lab, the Kind cluster does not have cloud metadata to collect.  These values will be spoofed for the purposes of this lab.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">resource/kind:</span>\n  <span class=\"hljs-attr\">attributes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">cloud.account.id</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-account</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-kind</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-03.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-2\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-fbtk5</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace-2\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(cloud.account.id) <span class=\"hljs-keyword\">and</span> isNotNull(k8s.cluster.name)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, cloud.account.id, k8s.cluster.name, k8s.namespace.name, k8s.deployment.name, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_resourcedetection_processor.png\" alt=\"dql_resourcedetection_processor\" /></p>\n<h2 id=\"resourceprocessor\">resource Processor</h2>\n<h3 id=\"addresourceprocessorattributes\">Add <code>resource</code> processor (attributes)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourceprocessor</p>\n<p>The <code>resource</code> processor allows us to directly add, remove, or change resource attributes on the telemetry.  View the documentation for more details.</p>\n<p>We will use this processor to make the follow changes to our telemetry:</p>\n<ul>\n<li><code>k8s.pod.ip</code> values in our log data are either the same or invalid; delete the useless attribute</li>\n<li><code>telemetry.sdk.name</code> set to <code>opentelemetry</code> will allow us to easily identify logs captured through OpenTelemetry</li>\n<li><code>dynatrace.otel.collector</code> is a non-standardized attribute that we made up to help us identify which Collector captured this data</li>\n<li><code>dt.security_context</code> is a Dynatrace specific attribute that we use to manage user permissions to the telemetry<ul>\n<li>This could also be set using OpenPipeline, but this puts control of this attribute's value at the app/infra layer (optionally)</li></ul></li>\n</ul>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n    <span class=\"hljs-attr\">resource:</span>\n        <span class=\"hljs-attr\">attributes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">delete</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">telemetry.sdk.name</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">opentelemetry</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dynatrace.otel.collector</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dynatrace-logs</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dt.security_context</span>\n          <span class=\"hljs-attr\">from_attribute:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-04.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-3\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-xx6km</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querylogsindynatrace-3\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(dt.security_context)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> isNotNull(cloud.account.id) <span class=\"hljs-keyword\">and</span> isNotNull(k8s.cluster.name)\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(k8s.deployment.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, loglevel, status, dt.security_context, dynatrace.otel.collector, cloud.account.id, k8s.cluster.name, k8s.namespace.name, k8s.deployment.name, content\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_resource_processor.png\" alt=\"dql_resource_processor\" /></p>\n<h2 id=\"exporttootlpreceiver\">Export to OTLP Receiver</h2>\n<p>The <code>astronomy-shop</code> demo application has the OpenTelemetry agents and SDKs already instrumented.  These agents and SDKs are generating logs (traces and metrics too) that are being exported to a Collector running within the <code>astronomy-shop</code> namespace bundled into the application deployment.  We want these logs to be shipped to Dynatrace as well.</p>\n<h3 id=\"otlpreceiver\"><code>otlp</code> receiver</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver</p>\n<p>Adding the <code>otlp</code> receiver allows us to receive telemetry from otel exporters, such as agents and other collectors.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    service:\n      pipelines:\n        logs:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/logs/otel-collector-logs-crd-05.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-logs configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-4\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-logs-collector-gu0rm</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"customizeastronomyshophelmvalues\">Customize astronomy-shop helm values</h3>\n<p>OpenTelemetry data created by agents and SDKs should include <code>service.name</code> and <code>service.namespace</code> attributes.  We will make the <code>service.namespace</code> unique to our deployment using our <code>NAME</code> environment variable declared earlier, using a <code>sed</code> command on the Helm chart's <code>values.yaml</code> file.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">default:</span>\n  <span class=\"hljs-comment\"># List of environment variables applied to all components</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_SERVICE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">&quot;metadata.labels[&#x27;app.kubernetes.io/component&#x27;]&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_COLLECTOR_NAME</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-otelcol&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">cumulative</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_RESOURCE_ATTRIBUTES</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;service.name=$(OTEL_SERVICE_NAME),service.namespace=NAME_TO_REPLACE,service.version=<span class=\"hljs-template-variable\">{{ .Chart.AppVersion }}</span>&#x27;</span>\n</code></pre>\n<blockquote>\n  <p>service.namespace=NAME<em>TO</em>REPLACE\\\n  service.namespace=INITIALS-k8s-otel-o11y</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">sed -i <span class=\"hljs-string\">&quot;s,NAME_TO_REPLACE,<span class=\"hljs-variable\">$NAME</span>,&quot;</span> astronomy-shop/collector-values.yaml\n</code></pre>\n<h3 id=\"updateastronomyshopopentelemetrycollectorexportendpointviahelm\">Update <code>astronomy-shop</code> OpenTelemetry Collector export endpoint via helm</h3>\n<p>Our <code>collector-values.yaml</code> contains new configurations for the application so that the <code>astronomy-shop</code> Collector includes exporters that ship to the Collectors deployed in the <code>dynatrace</code> namespace.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">exporters:</span>\n  <span class=\"hljs-comment\"># Dynatrace OTel Collectors</span>\n  <span class=\"hljs-attr\">otlphttp/dttraces:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-traces-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtlogs:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-logs-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtmetrics:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-metrics-cluster-collector.dynatrace.svc.cluster.local:4318</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">helm upgrade astronomy-shop open-telemetry/opentelemetry-demo --values astronomy-shop/collector-values.yaml --namespace astronomy-shop --version <span class=\"hljs-string\">&quot;0.31.0&quot;</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>NAME: astronomy-shop\\\n  LAST DEPLOYED: Thu Jun 27 20:58:38 2024\\\n  NAMESPACE: astronomy-shop\\\n  STATUS: deployed\\\n  REVISION: 2</p>\n</blockquote>\n<h3 id=\"querylogsindynatrace-4\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> k8s.namespace.name <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;astronomy-shop&quot; <span class=\"hljs-keyword\">and</span> isNotNull(service.name)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> limit <span class=\"hljs-number\">100</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, content, k8s.cluster.name, k8s.pod.name, service.namespace, service.name, telemetry.sdk.language, otel.scope.name\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_otel_sdk_logs.png\" alt=\"dql_otel_sdk_logs\" /></p>","activityList":[]},{"id":"2.3","name":"OpenTelemetry Collector for Events","content":"<h2 id=\"opentelemetrycollectorforevents\">OpenTelemetry Collector for Events</h2>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>The Kubernetes Objects receiver collects, either by pulling or watching, objects from the Kubernetes API server. The most common use case for this receiver is watching Kubernetes events, but it can be used to collect any type of Kubernetes object.</p>\n<h3 id=\"addk8sobjectsreceivertocollectkuberneteseventsaslogs\">Add <code>k8sobjects</code> receiver to collect Kubernetes events as logs</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-objects-receiver</p>\n<p>Our goal is to capture any events related to the <code>astronomy-shop</code> and <code>dynatrace</code> namespaces.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">receivers:</span>\n  <span class=\"hljs-attr\">k8sobjects/events:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">serviceAccount</span>\n    <span class=\"hljs-attr\">objects:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">events</span>\n        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">watch</span>\n        <span class=\"hljs-attr\">namespaces:</span> [<span class=\"hljs-string\">astronomy-shop</span>,<span class=\"hljs-string\">dynatrace</span>]\n</code></pre>\n<p>The <code>k8sobjects</code> receiver is only available on the Contrib Distro of the OpenTelemetry Collector.  Therefore we must deploy a new Collector using the <code>contrib</code> image.</p>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesevents\">Create <code>clusterrole</code> with read access to Kubernetes events</h3>\n<p>Since the processor uses the Kubernetes API, it needs the correct permission to work correctly. Since service accounts are the only authentication option you must give the service account the proper access. For any object you want to collect you need to ensure the name is added to the cluster role. </p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;events&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-events.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-events created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-events-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-events</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-events-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-events-crb created</p>\n</blockquote>\n<h3 id=\"addk8sobjectsreceivertocollectkuberneteseventsaslogs-1\">Add <code>k8sobjects</code> receiver to collect Kubernetes events as logs</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-objects-receiver</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">receivers:</span>\n  <span class=\"hljs-attr\">k8sobjects/events:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">serviceAccount</span>\n    <span class=\"hljs-attr\">objects:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">events</span>\n        <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">watch</span>\n        <span class=\"hljs-attr\">namespaces:</span> [<span class=\"hljs-string\">astronomy-shop</span>,<span class=\"hljs-string\">dynatrace</span>]\n</code></pre>\n<h3 id=\"deployopentelemetrycollectorcontribdistrodeploymentgateway\">Deploy OpenTelemetry Collector - Contrib Distro - Deployment (Gateway)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-operator</p>\n<p>Since the receiver gathers telemetry for the cluster as a whole, only one instance of the receiver is needed across the cluster in order to collect all the data.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-events</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/events/otel-collector-events-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-events created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-events-collector-559d5b9d77-rb26d</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"generateevents\">Generate Events</h2>\n<h3 id=\"generateeventsusingdeploymentscalecommand\">Generate events using deployment scale command</h3>\n<p>https://kubernetes.io/docs/reference/kubectl/generated/kubectl_scale/</p>\n<p>We can generate new Kubernetes events related to the <code>astronomy-shop</code> namespace by scaling a deployment up and then scaling it back down.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl scale deployment astronomy-shop-imageprovider -n astronomy-shop --replicas=2\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>deployment.apps/astronomy-shop-imageprovider scaled</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl scale deployment astronomy-shop-imageprovider -n astronomy-shop --replicas=1\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>deployment.apps/astronomy-shop-imageprovider scaled</p>\n</blockquote>\n<h3 id=\"querylogsindynatrace\">Query logs in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">fetch logs\n| filter dynatrace.otel.collector == &quot;dynatrace-events&quot; and event.domain == &quot;k8s&quot; and k8s.resource.name == &quot;events&quot;\n| filter object.metadata.namespace == &quot;astronomy-shop&quot;\n| sort timestamp desc\n| limit 100\n| fields timestamp, k8s.cluster.name, {object.metadata.namespace, alias: k8s.namespace.name}, object.message, object.reason, event.name\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/logs-dql_k8s_events.png\" alt=\"dql_k8s_events\" /></p>","activityList":[]},{"id":"2.4","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"whatyoulearnedtoday\">What You Learned Today</h3>\n<p>By completing this lab, you've successfully deployed the OpenTelemetry Collector to collect logs, enrich log attributes for better context, and ship those logs to Dynatrace for analysis.</p>\n<ul>\n<li>The OpenTelemetry Collector was deployed as a DaemonSet, behaving as an Agent running on each Node</li>\n<li>The Dynatrace Distro of OpenTelemetry Collector includes supported modules needed to ship logs to Dynatrace<ul>\n<li>The <code>filelog</code> receiver scrapes logs from the Node filesystem and parses the contents</li>\n<li>The <code>otlp</code> receiver receives logs that are exported from agents, SDKs, and other Collectors</li>\n<li>The <code>k8sattributes</code> processor enriches the logs with Kubernetes attributes</li>\n<li>The <code>resourcedetection</code> processor enriches the logs with cloud and cluster attributes</li>\n<li>The <code>resource</code> processor enriches the logs with custom (resource) attributes</li></ul></li>\n<li>The Community Contrib Distro of OpenTelemetry Collector includes modules needed to ship events to Dynatrace<ul>\n<li>The <code>k8sobjects</code> receiver watches for Kubernetes events (and other resources) on the cluster</li></ul></li>\n<li>Dynatrace DQL (via Notebooks) allows you to perform powerful queries and analysis of the log data</li>\n</ul>","activityList":[]}]},{"id":"3","name":"OpenTelemetry Traces","content":"<h2 id=\"opentelemetrytraces\">OpenTelemetry Traces</h2>\n<h3 id=\"whatyoulllearntoday\">What You’ll Learn Today</h3>\n<p>In this lab we'll utilize the OpenTelemetry Collector deployed as a Deployment (Gateway) to collect application traces/spans, generated by OpenTelemetry, from a Kubernetes cluster and ship them to Dynatrace.</p>\n<p>Lab tasks:</p>\n<ol>\n<li>Deploy OpenTelemetry Collector as a Deployment</li>\n<li>Configure OpenTelemetry Collector service pipeline for span enrichment</li>\n<li>Analyze application reliability via traces in Dynatrace</li>\n</ol>\n<p><img src=\"assets/traces-dt_otel_service_overview.png\" alt=\"dynatrace otel service overview\" />\n<img src=\"assets/traces-dt_otel_service_traces.png\" alt=\"dynatrace otel service traces\" /></p>","activityList":[{"id":"3.1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h2 id=\"importdashboardintodynatrace\">Import Dashboard into Dynatrace</h2>\n<p><a href=\"https://github.com/dynatrace-wwse/enablement-kubernetes-opentelemetry/blob/main/lab-modules/opentelemetry-traces/opentelemetry-traces_dt_dashboard.json\">Dashboard</a></p>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-builtin-name\">export</span> DT_API_TOKEN={your-api-token}\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>\n<h3 id=\"moveintothebasedirectoryandthengototraces\">Move into the base directory and then go to traces</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">cd</span> lab-modules/opentelemetry-traces\n</code></pre>","activityList":[]},{"id":"3.2","name":"OpenTelemetry Collector for Traces","content":"<h2 id=\"opentelemetrycollectorfortraces\">OpenTelemetry Collector for Traces</h2>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>Distributed traces and their spans, generated by OpenTelemetry agents and SDKs, are exported from their origin to an <code>otlp</code> receiver.  These traces/spans can be sent directly to Dynatrace, using the OTLP ingest API.  However, it is highly recommended to use the OpenTelemetry Collector to process, filter, and manipulate the data first.</p>\n<h3 id=\"otlpreceiver\"><code>otlp</code> receiver</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver</p>\n<p>Adding the <code>otlp</code> receiver allows us to receive telemetry from otel exporters, such as agents and other collectors.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<h3 id=\"deployopentelemetrycollectordeployment\">Deploy OpenTelemetry Collector Deployment</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment#tabgroup--dynatrace-docs--gateway</p>\n<p>The gateway collector deployment pattern consists of applications (or other collectors) sending telemetry signals to a single OTLP endpoint provided by one or more collector instances running as a standalone service (for example, a deployment in Kubernetes), typically per cluster, per data center or per region.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-traces</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/traces/otel-collector-traces-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-traces created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-traces-collector-559d5b9d77-ms24p</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"exportopentelemetrydatafromastronomyshoptoopentelemetrycollectordynatracedistro\">Export OpenTelemetry data from <code>astronomy-shop</code> to OpenTelemetry Collector - Dynatrace Distro</h3>\n<p>The <code>astronomy-shop</code> demo application has the OpenTelemetry agents and SDKs already instrumented.  These agents and SDKs are generating traces (logs and metrics too) that are being exported to a Collector running within the <code>astronomy-shop</code> namespace bundled into the application deployment.  We want these traces to be shipped to Dynatrace as well.</p>\n<h3 id=\"customizeastronomyshophelmvalues\">Customize astronomy-shop helm values</h3>\n<p>OpenTelemetry data created by agents and SDKs should include <code>service.name</code> and <code>service.namespace</code> attributes.  We will make the <code>service.namespace</code> unique to our deployment using our <code>NAME</code> environment variable declared earlier, using a <code>sed</code> command on the Helm chart's <code>values.yaml</code> file.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">default:</span>\n  <span class=\"hljs-comment\"># List of environment variables applied to all components</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_SERVICE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">&quot;metadata.labels[&#x27;app.kubernetes.io/component&#x27;]&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_COLLECTOR_NAME</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-otelcol&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">cumulative</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_RESOURCE_ATTRIBUTES</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;service.name=$(OTEL_SERVICE_NAME),service.namespace=NAME_TO_REPLACE,service.version=<span class=\"hljs-template-variable\">{{ .Chart.AppVersion }}</span>&#x27;</span>\n</code></pre>\n<blockquote>\n  <p>service.namespace=NAME<em>TO</em>REPLACE\\\n  service.namespace=INITIALS-k8s-otel-o11y</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">sed -i <span class=\"hljs-string\">&quot;s,NAME_TO_REPLACE,<span class=\"hljs-variable\">$NAME</span>,&quot;</span> astronomy-shop/collector-values.yaml\n</code></pre>\n<h3 id=\"updateastronomyshopopentelemetrycollectorexportendpointviahelm\">Update <code>astronomy-shop</code> OpenTelemetry Collector export endpoint via helm</h3>\n<p>Our <code>collector-values.yaml</code> contains new configurations for the application so that the <code>astronomy-shop</code> Collector includes exporters that ship to the Collectors deployed in the <code>dynatrace</code> namespace.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">exporters:</span>\n  <span class=\"hljs-comment\"># Dynatrace OTel Collectors</span>\n  <span class=\"hljs-attr\">otlphttp/dttraces:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-traces-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtlogs:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-logs-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtmetrics:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-metrics-cluster-collector.dynatrace.svc.cluster.local:4318</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">helm upgrade astronomy-shop open-telemetry/opentelemetry-demo --values astronomy-shop/collector-values.yaml --namespace astronomy-shop --version <span class=\"hljs-string\">&quot;0.31.0&quot;</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>NAME: astronomy-shop\\\n  LAST DEPLOYED: Thu Jun 27 20:58:38 2024\\\n  NAMESPACE: astronomy-shop\\\n  STATUS: deployed\\\n  REVISION: 2</p>\n</blockquote>\n<h3 id=\"opentelemetrytracesindynatrace\">OpenTelemetry Traces in Dynatrace</h3>\n<p>Result:</p>\n<p>Open the Distributed Traces Classic App to view the traces in Dynatrace (you can use the new Distributed Traces App if available as well).</p>\n<p><img src=\"assets/traces-dt_distributed_traces.png\" alt=\"dt distributed traces\" /></p>\n<p>Locate a trace from the <code>checkoutservice</code> service with a trace/request name of <code>oteldemo.CheckoutService/PlaceOrder</code>.  This is a nice end-to-end trace.</p>\n<p><img src=\"assets/traces-dt_trace_waterfall.png\" alt=\"dt trace waterfall\" /></p>\n<p>Click on a span to see the various attributes that are attached to the span.</p>\n<p><img src=\"assets/traces-dt_trace_attributes.png\" alt=\"dt trace attributes\" /></p>\n<p>These attributes are good, but we can add more to provide better Kubernetes context to these transactions.</p>\n<p><a href=\"https://docs.dynatrace.com/docs/observe-and-explore/distributed-traces/analysis/get-started\">Refer to the Dynatrace documentation for more details</a></p>\n<h2 id=\"k8sattributesprocessor\">k8sattributes Processor</h2>\n<h3 id=\"addkubernetesattributeswiththek8sattributesprocessor\">Add Kubernetes Attributes with the <code>k8sattributes</code> Processor</h3>\n<p>The Kubernetes Attributes Processor automatically discovers Kubernetes pods, extracts their metadata, and adds the extracted metadata to spans, metrics, and logs as resource attributes.</p>\n<p>The Kubernetes Attributes Processor is one of the most important components for a collector running in Kubernetes. Any collector receiving application data should use it. Because it adds Kubernetes context to your telemetry, the Kubernetes Attributes Processor lets you correlate your application’s traces, metrics, and logs signals with your Kubernetes telemetry, such as pod metrics and traces.</p>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesobjects\">Create <code>clusterrole</code> with read access to Kubernetes objects</h3>\n<p>Since the processor uses the Kubernetes API, it needs the correct permission to work correctly. For most use cases, you should give the service account running the collector the following permissions via a ClusterRole.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-traces</span>\n<span class=\"hljs-attr\">rules:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;pods&quot;</span>, <span class=\"hljs-string\">&quot;namespaces&quot;</span>, <span class=\"hljs-string\">&quot;nodes&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;apps&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&quot;extensions&quot;</span>]\n  <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&quot;replicasets&quot;</span>]\n  <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&quot;get&quot;</span>, <span class=\"hljs-string\">&quot;list&quot;</span>, <span class=\"hljs-string\">&quot;watch&quot;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-traces.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-traces created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-traces-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-traces-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-traces</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-traces-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-traces-crb created</p>\n</blockquote>\n<h3 id=\"addk8sattributesprocessor\">Add <code>k8sattributes</code> processor</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-attributes-processor</p>\n<p>The <code>k8sattributes</code> processor will query metadata from the cluster about the k8s objects.  The Collector will then marry this metadata to the telemetry.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">k8sattributes:</span>\n    <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">&quot;serviceAccount&quot;</span>\n    <span class=\"hljs-attr\">passthrough:</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-attr\">filter:</span>\n        <span class=\"hljs-attr\">node_from_env_var:</span> <span class=\"hljs-string\">KUBE_NODE_NAME</span>\n    <span class=\"hljs-attr\">extract:</span>\n        <span class=\"hljs-attr\">metadata:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.namespace.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.deployment.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.daemonset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.job.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.cronjob.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.replicaset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.statefulset.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.node.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.container.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.id</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.name</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.tag</span>\n        <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">tag_name:</span> <span class=\"hljs-string\">app.label.component</span>\n            <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">app.kubernetes.io/component</span>\n            <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">pod</span>\n    <span class=\"hljs-attr\">pod_association:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.name</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">connection</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/traces/otel-collector-traces-crd-02.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-traces configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-1\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-traces-collector-559d5b9d77-xn84p</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"opentelemetrytracesindynatracewithkubernetesattributes\">OpenTelemetry Traces in Dynatrace with Kubernetes Attributes</h3>\n<p>Dynatrace utilizes the <code>service.name</code>, <code>k8s.workload.name</code> and <code>k8s.namespace.name</code> to generate the unified service.</p>\n<p>https://docs.dynatrace.com/docs/platform-modules/applications-and-microservices/services/service-detection-and-naming/service-types/unified-service#service-detection</p>\n<p>Result:</p>\n<p>With the additional Kubernetes attributes attached to the spans, Dynatrace will detect new unified services.</p>\n<p><img src=\"assets/traces-dt_otel_unified_service_namespace.png\" alt=\"dt unified service detection\" /></p>\n<p>Locate a new trace from the new <code>checkoutservice</code> service with a trace/request name of <code>oteldemo.CheckoutService/PlaceOrder</code>.  Click on a span to see the new resource attributes that have been added to the span.</p>\n<p><img src=\"assets/traces-dt_otel_k8sattributes_processor.png\" alt=\"dt otel k8sattributes processor\" /></p>\n<h2 id=\"resourcedetectionprocessor\">resourcedetection Processor</h2>\n<h3 id=\"addresourcedetectionprocessor\">Add <code>resourcedetection</code> processor</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/resourcedetectionprocessor/README.md#gcp-metadata</p>\n<p>The resource detection processor can be used to detect resource information from the host, in a format that conforms to the OpenTelemetry resource semantic conventions, and append or override the resource value in telemetry data with this information.  Detectors are available for AWS, Azure, GCP, and several other platforms; see the documentation for more details.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n  <span class=\"hljs-attr\">resourcedetection/gcp:</span>\n    <span class=\"hljs-attr\">detectors:</span> [<span class=\"hljs-string\">env</span>, <span class=\"hljs-string\">gcp</span>]\n    <span class=\"hljs-attr\">timeout:</span> <span class=\"hljs-string\">2s</span>\n    <span class=\"hljs-attr\">override:</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p><strong>note:</strong> for this lab, the Kind cluster does not have cloud metadata to collect.  These values will be spoofed for the purposes of this lab.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">resource/kind:</span>\n  <span class=\"hljs-attr\">attributes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">cloud.account.id</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-account</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-kind</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/traces/otel-collector-traces-crd-03.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-traces configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-2\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-traces-collector-559d5b9d77-rp21d</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"opentelemetrytracesindynatracewithcloudattributes\">OpenTelemetry Traces in Dynatrace with Cloud Attributes</h3>\n<p>Result:</p>\n<p>Locate a new trace from the new <code>checkoutservice</code> service with a trace/request name of <code>oteldemo.CheckoutService/PlaceOrder</code>.  Click on a span to see the new resource attributes that have been added to the span.</p>\n<p><img src=\"assets/traces-dt_otel_resourcedetection_processor.png\" alt=\"dt otel resourcedetection processor\" />\n** In a real world scenario, <code>cloud.account.id</code> may be considered sensitive data; blurred for this reason.</p>\n<h2 id=\"resourceprocessor\">resource Processor</h2>\n<h3 id=\"addresourceprocessorattributes\">Add <code>resource</code> processor (attributes)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourceprocessor</p>\n<p>The <code>resource</code> processor allows us to directly add, remove, or change resource attributes on the telemetry.  View the documentation for more details.</p>\n<p>We will use this processor to make the follow changes to our telemetry:</p>\n<ul>\n<li><code>k8s.pod.ip</code> values in our data are either the same or invalid; delete the useless attribute</li>\n<li><code>telemetry.sdk.name</code> set to <code>opentelemetry</code> will allow us to easily identify data captured through OpenTelemetry</li>\n<li><code>dynatrace.otel.collector</code> is a non-standardized attribute that we made up to help us identify which Collector captured this data</li>\n<li><code>dt.security_context</code> is a Dynatrace specific attribute that we use to manage user permissions to the telemetry<ul>\n<li>This could also be set using OpenPipeline, but this puts control of this attribute's value at the app/infra layer (optionally)</li></ul></li>\n</ul>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n    <span class=\"hljs-attr\">resource:</span>\n        <span class=\"hljs-attr\">attributes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">delete</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">telemetry.sdk.name</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">opentelemetry</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dynatrace.otel.collector</span>\n          <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dynatrace-traces</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">dt.security_context</span>\n          <span class=\"hljs-attr\">from_attribute:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/traces/otel-collector-traces-crd-04.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-traces configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-3\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-traces-collector-559d5b9d77-ny98q</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"opentelemetrytracesindynatracewithcustomresourceattributes\">OpenTelemetry Traces in Dynatrace with Custom Resource Attributes</h3>\n<p>Result:</p>\n<p>Locate a new trace from the new <code>checkoutservice</code> service with a trace/request name of <code>oteldemo.CheckoutService/PlaceOrder</code>.  Click on a span to see the new resource attributes that have been added to the span.</p>\n<p><img src=\"assets/traces-dt_otel_resource_processor.png\" alt=\"dt otel resource processor\" /></p>\n<h3 id=\"dynatracedashboardwithunifiedservicesfromopentelemetry\">Dynatrace Dashboard with Unified Services from OpenTelemetry</h3>\n<p>Open the Dashboard that you imported to view the throughput, response time, and failure metrics for the <code>astronomy-shop</code> application services.</p>\n<p><img src=\"assets/traces-dt_traces_dashboard.png\" alt=\"dashboard\" /></p>","activityList":[]},{"id":"3.3","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"whatyoulearnedtoday\">What You Learned Today</h3>\n<p>By completing this lab, you've successfully deployed the OpenTelemetry Collector to collect traces, enrich span attributes for better context, and ship those traces/spans to Dynatrace for analysis.</p>\n<ul>\n<li>The OpenTelemetry Collector was deployed as a Deployment, behaving as a Gateway on the cluster</li>\n<li>The Dynatrace Distro of OpenTelemetry Collector includes supported modules needed to ship traces to Dynatrace<ul>\n<li>The <code>otlp</code> receiver receives traces (and other signals) from OpenTelemetry exporters via gRPC/HTTP</li>\n<li>The <code>k8sattributes</code> processor enriches the spans with Kubernetes attributes</li>\n<li>The <code>resourcedetection</code> processor enriches the spans with cloud and cluster (GCP/GKE) attributes</li>\n<li>The <code>resource</code> processor enriches the spans with custom (resource) attributes</li></ul></li>\n<li>Dynatrace allows you to perform powerful queries and analysis of the trace/span data</li>\n</ul>","activityList":[]}]},{"id":"4","name":"OpenTelemetry Metrics","content":"<h2 id=\"opentelemetrymetrics\">OpenTelemetry Metrics</h2>\n<h3 id=\"whatyoulllearntoday\">What You’ll Learn Today</h3>\n<p>In this lab we'll utilize the OpenTelemetry Collector deployed as a DaemonSet (Node Agent) to collect Node (kubelet) metrics from a Kubernetes cluster and ship them to Dynatrace.  Additionally, we'll utilize a second OpenTelemetry Collector deployed as a Deployment (Gateway) to collect Cluster (Kubernetes API) metrics from the Kubernetes cluster and ship them to Dynatrace.</p>\n<p>Lab tasks:</p>\n<ol>\n<li>Deploy OpenTelemetry Collector as a DaemonSet</li>\n<li>Configure OpenTelemetry Collector service pipeline for metric enrichment</li>\n<li>Deploy OpenTelemetry Collector as a Deployment</li>\n<li>Configure OpenTelemetry Collector service pipeline for metric enrichment</li>\n<li>Query and visualize metrics in Dynatrace using DQL</li>\n</ol>","activityList":[{"id":"4.1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h3 id=\"importnotebookintodynatrace\">Import Notebook into Dynatrace</h3>\n<p><a href=\"https://github.com/dynatrace-wwse/enablement-kubernetes-opentelemetry/blob/main/lab-modules/opentelemetry-metrics/opentelemetry-metrics_dt_notebook.json\">Notebook</a></p>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-builtin-name\">export</span> DT_API_TOKEN={your-api-token}\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>\n<h3 id=\"moveintothebasedirectory\">Move into the base directory</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">cd</span> -\n<span class=\"hljs-built_in\">cd</span> lab-modules/opentelemetry-metrics\n</code></pre>","activityList":[]},{"id":"4.2","name":"Collector for Node Metrics","content":"<h2 id=\"collectorfornodemetrics\">Collector for Node Metrics</h2>\n<h3 id=\"kubernetesnodemetrics\">Kubernetes Node Metrics</h3>\n<p>Each Kubernetes Node runs a kubelet that includes an API server. The <code>kubeletstats</code> Receiver connects to that kubelet via the API server to collect metrics about the node and the workloads running on the node.</p>\n<h3 id=\"deployopentelemetrycollector\">Deploy OpenTelemetry Collector</h3>\n<h3 id=\"contribdistrodaemonsetnodeagent\">Contrib Distro - Daemonset (Node Agent)</h3>\n<p>The <code>kubeletstats</code> receiver is only available on the Contrib Distro of the OpenTelemetry Collector.  Therefore we must deploy a new Collector using the <code>contrib</code> image.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-metrics-node</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">K8S_NODE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">spec.nodeName</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;daemonset&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/metrics/otel-collector-metrics-node-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-metrics-node created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-metrics-node-collector-2kzlp</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesobjects\">Create <code>clusterrole</code> with read access to Kubernetes objects</h3>\n<p>Since the receiver uses the Kubernetes API, it needs the correct permission to work correctly. For most use cases, you should give the service account running the Collector the following permissions via a ClusterRole.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-metrics</span>\n<span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;events&#x27;</span>, <span class=\"hljs-string\">&#x27;namespaces&#x27;</span>, <span class=\"hljs-string\">&#x27;namespaces/status&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/spec&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/stats&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/proxy&#x27;</span>, <span class=\"hljs-string\">&#x27;pods&#x27;</span>, <span class=\"hljs-string\">&#x27;pods/status&#x27;</span>, <span class=\"hljs-string\">&#x27;replicationcontrollers&#x27;</span>, <span class=\"hljs-string\">&#x27;replicationcontrollers/status&#x27;</span>, <span class=\"hljs-string\">&#x27;resourcequotas&#x27;</span>, <span class=\"hljs-string\">&#x27;services&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;apps&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;daemonsets&#x27;</span>, <span class=\"hljs-string\">&#x27;deployments&#x27;</span>, <span class=\"hljs-string\">&#x27;replicasets&#x27;</span>, <span class=\"hljs-string\">&#x27;statefulsets&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;extensions&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;daemonsets&#x27;</span>, <span class=\"hljs-string\">&#x27;deployments&#x27;</span>, <span class=\"hljs-string\">&#x27;replicasets&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;batch&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;jobs&#x27;</span>, <span class=\"hljs-string\">&#x27;cronjobs&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;autoscaling&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;horizontalpodautoscalers&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-metrics.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-metrics created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccount\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service account</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-metrics-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-metrics-node-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-metrics</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-metrics-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-metrics-crb created</p>\n</blockquote>\n<h3 id=\"kubeletstatsreceiver\"><code>kubeletstats</code> receiver</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubeletstats-receiver</p>\n<p>By default, metrics will be collected for pods and nodes, but you can configure the receiver to collect container and volume metrics as well. The receiver also allows configuring how often the metrics are collected:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      kubeletstats:\n        collection_interval: 30s\n        auth_type: &#x27;serviceAccount&#x27;\n        endpoint: &#x27;${env:K8S_NODE_NAME}:10250&#x27;\n        insecure_skip_verify: true\n        metric_groups:\n          - node\n          - pod\n          - container\n</span></code></pre>\n<p>Default Metrics:</p>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/kubeletstatsreceiver/documentation.md</p>\n<p><strong>note:</strong> for this lab, the Kind cluster does not have cluster metadata to collect.  These values will be spoofed for the purposes of this lab.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">resource/kind:</span>\n  <span class=\"hljs-attr\">attributes:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">k8s.cluster.name</span>\n    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">dt-k8s-o11y-kind</span>\n    <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n</code></pre>\n<h3 id=\"querynodemetricsindynatrace\">Query Node metrics in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">timeseries node_cpu = avg(k8s.node.cpu.usage), by: {k8s.cluster.name, k8s.node.name}\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/metrics-dql_kubeletstats_node_cpu.png\" alt=\"dql_kubeletstats_node_cpu\" /></p>\n<h3 id=\"k8sattributesprocessor\">k8sattributes Processor</h3>\n<p>The Kubernetes Attributes Processor automatically discovers Kubernetes pods, extracts their metadata, and adds the extracted metadata to spans, metrics, and logs as resource attributes.</p>\n<p>The Kubernetes Attributes Processor is one of the most important components for a collector running in Kubernetes. Any collector receiving application data should use it. Because it adds Kubernetes context to your telemetry, the Kubernetes Attributes Processor lets you correlate your application’s traces, metrics, and logs signals with your Kubernetes telemetry, such as pod metrics and traces.</p>\n<h3 id=\"addk8sattributesprocessor\">Add <code>k8sattributes</code> processor</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-attributes-processor</p>\n<p>The <code>k8sattributes</code> processor will query metadata from the cluster about the k8s objects.  The Collector will then marry this metadata to the telemetry.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">k8sattributes:</span>\n  <span class=\"hljs-attr\">auth_type:</span> <span class=\"hljs-string\">&quot;serviceAccount&quot;</span>\n  <span class=\"hljs-attr\">passthrough:</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-attr\">filter:</span>\n    <span class=\"hljs-attr\">node_from_env_var:</span> <span class=\"hljs-string\">KUBE_NODE_NAME</span>\n  <span class=\"hljs-attr\">extract:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.namespace.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.deployment.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.daemonset.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.job.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.cronjob.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.replicaset.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.statefulset.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.node.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">k8s.container.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.id</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">container.image.tag</span>\n    <span class=\"hljs-attr\">labels:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">tag_name:</span> <span class=\"hljs-string\">app.label.component</span>\n        <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">app.kubernetes.io/component</span>\n        <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">pod</span>\n    <span class=\"hljs-attr\">pod_association:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.name</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">resource_attribute</span>\n            <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">k8s.pod.ip</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">sources:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-string\">connection</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/metrics/otel-collector-metrics-node-crd-02.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-metrics-node configured</p>\n</blockquote>\n<h3 id=\"validaterunningpods-1\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-metrics-node-collector-drk1p</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"querypodmetricsindynatrace\">Query Pod metrics in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">timeseries pod_cpu = avg(k8s.pod.cpu.usage), by: { k8s.pod.name, k8s.node.name, k8s.namespace.name, k8s.deployment.name, k8s.cluster.name, k8s.pod.uid }\n| filter k8s.namespace.name == &quot;astronomy-shop&quot; and k8s.deployment.name == &quot;astronomy-shop-productcatalogservice&quot;\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/metrics-dql_kubeletstats_pod_cpu.png\" alt=\"dql_kubeletstats_pod_cpu\" /></p>","activityList":[]},{"id":"4.3","name":"Collector for Cluster Metrics","content":"<h2 id=\"collectorforclustermetrics\">Collector for Cluster Metrics</h2>\n<h3 id=\"kubernetesclustermetrics\">Kubernetes Cluster Metrics</h3>\n<p>The Kubernetes Cluster Receiver collects metrics and entity events about the cluster as a whole using the Kubernetes API server. Use this receiver to answer questions about pod phases, node conditions, and other cluster-wide questions.</p>\n<h3 id=\"deployopentelemetrycollector\">Deploy OpenTelemetry Collector</h3>\n<h3 id=\"contribdistrodeploymentgateway\">Contrib Distro - Deployment (Gateway)</h3>\n<p>https://github.com/open-telemetry/opentelemetry-operator</p>\n<p>The <code>k8s_cluster</code> receiver is only available on the Contrib Distro of the OpenTelemetry Collector.  Therefore we must deploy a new Collector using the <code>contrib</code> image.</p>\n<p>Since the receiver gathers telemetry for the cluster as a whole, only one instance of the receiver is needed across the cluster in order to collect all the data.  The Collector will be deployed as a Deployment (Gateway).</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-metrics-cluster</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/metrics/otel-collector-metrics-cluster-crd-01.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-metrics-cluster created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-metrics-cluster-collector-7bd8dc4995-6sgs2</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"k8s_clusterreceiver\"><code>k8s_cluster</code> receiver</h3>\n<p>https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-cluster-receiver</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      k8s_cluster:\n        collection_interval: 60s\n        node_conditions_to_report: [ &quot;Ready&quot;, &quot;MemoryPressure&quot;, &quot;DiskPressure&quot; ]\n        allocatable_types_to_report: [ &quot;cpu&quot;,&quot;memory&quot; ]\n        metadata_collection_interval: 5m\n</span></code></pre>\n<p>Default Metrics:</p>\n<p>https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/k8sclusterreceiver/documentation.md</p>\n<h3 id=\"querydeploymentmetricsindynatrace\">Query Deployment metrics in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">timeseries pods_avail = min(k8s.deployment.available), by: {k8s.cluster.name, k8s.deployment.name}, filter: {k8s.namespace.name == &quot;astronomy-shop&quot;}\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/metrics-dql_k8scluster_pod_avail.png\" alt=\"dql_k8scluster_pod_avail\" /></p>\n<h3 id=\"exporttootlpreceiver\">Export to OTLP Receiver</h3>\n<p>The <code>astronomy-shop</code> demo application has the OpenTelemetry agents and SDKs already instrumented.  These agents and SDKs are generating metrics (traces and logs too) that are being exported to a Collector running within the <code>astronomy-shop</code> namespace bundled into the application deployment.  We want these metrics to be shipped to Dynatrace as well.</p>\n<h3 id=\"otlpreceiver\"><code>otlp</code> receiver</h3>\n<p>https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver</p>\n<p>Adding the <code>otlp</code> receiver allows us to receive telemetry from otel exporters, such as agents and other collectors.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    service:\n      pipelines:\n        metrics:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [otlphttp/dynatrace]\n</span></code></pre>\n<h3 id=\"exportopentelemetrydatafromastronomyshoptoopentelemetrycollectorcontribdistro\">Export OpenTelemetry data from <code>astronomy-shop</code> to OpenTelemetry Collector - Contrib Distro</h3>\n<h3 id=\"customizeastronomyshophelmvalues\">Customize astronomy-shop helm values</h3>\n<p>OpenTelemetry data created by agents and SDKs should include <code>service.name</code> and <code>service.namespace</code> attributes.  We will make the <code>service.namespace</code> unique to our deployment using our <code>NAME</code> environment variable declared earlier, using a <code>sed</code> command on the Helm chart's <code>values.yaml</code> file.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">default:</span>\n  <span class=\"hljs-comment\"># List of environment variables applied to all components</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_SERVICE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">&quot;metadata.labels[&#x27;app.kubernetes.io/component&#x27;]&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_COLLECTOR_NAME</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-otelcol&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">cumulative</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_RESOURCE_ATTRIBUTES</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;service.name=$(OTEL_SERVICE_NAME),service.namespace=NAME_TO_REPLACE,service.version=<span class=\"hljs-template-variable\">{{ .Chart.AppVersion }}</span>&#x27;</span>\n</code></pre>\n<blockquote>\n  <p>service.namespace=NAME<em>TO</em>REPLACE\\\n  service.namespace=INITIALS-k8s-otel-o11y</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">sed -i <span class=\"hljs-string\">&quot;s,NAME_TO_REPLACE,<span class=\"hljs-variable\">$NAME</span>,&quot;</span> astronomy-shop/collector-values.yaml\n</code></pre>\n<h3 id=\"updateastronomyshopopentelemetrycollectorexportendpointviahelm\">Update <code>astronomy-shop</code> OpenTelemetry Collector export endpoint via helm</h3>\n<p>Our <code>collector-values.yaml</code> contains new configurations for the application so that the <code>astronomy-shop</code> Collector includes exporters that ship to the Collectors deployed in the <code>dynatrace</code> namespace.</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">exporters:</span>\n  <span class=\"hljs-comment\"># Dynatrace OTel Collectors</span>\n  <span class=\"hljs-attr\">otlphttp/dttraces:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-traces-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtlogs:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-logs-collector.dynatrace.svc.cluster.local:4318</span>\n  <span class=\"hljs-attr\">otlphttp/dtmetrics:</span>\n    <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-metrics-cluster-collector.dynatrace.svc.cluster.local:4318</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">helm upgrade astronomy-shop open-telemetry/opentelemetry-demo --values astronomy-shop/collector-values.yaml --namespace astronomy-shop --version <span class=\"hljs-string\">&quot;0.31.0&quot;</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>NAME: astronomy-shop\\\n  LAST DEPLOYED: Thu Jun 27 20:58:38 2024\\\n  NAMESPACE: astronomy-shop\\\n  STATUS: deployed\\\n  REVISION: 2</p>\n</blockquote>\n<h3 id=\"queryastronomyshopmetricsindynatrace\">Query <code>astronomy-shop</code> metrics in Dynatrace</h3>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">timeseries jvm_mem_used = avg(jvm.memory.used), by: {service.name, k8s.cluster.name}, filter: {k8s.namespace.name == &quot;astronomy-shop&quot;}\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/metrics-dql_sdk_jvm_mem.png\" alt=\"dql_sdk_jvm_mem\" /></p>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">timeseries avg(kafka.consumer.request_rate), by: {service.name, k8s.cluster.name}, filter: {k8s.namespace.name == &quot;astronomy-shop&quot;}\n</code></pre>\n<p>Result:</p>\n<p><img src=\"assets/metrics-dql_sdk_kafka_request_rate.png\" alt=\"dql_sdk_kafka_request_rate\" /></p>\n<h3 id=\"browseavailablemetricsindynatrace\">Browse available metrics in Dynatrace</h3>\n<p>You can browse all available metrics from OpenTelemetry sources in the Metrics Browser.  Filter on <code>Dimension:otel.scope.name</code> to find relevant metrics.</p>\n<p>https://docs.dynatrace.com/docs/observe-and-explore/dashboards-classic/metrics-browser</p>\n<p><img src=\"assets/metrics-dt_otel_scope_metrics.png\" alt=\"dt_otel_scope_metrics\" /></p>","activityList":[]},{"id":"4.4","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"whatyoulearnedtoday\">What You Learned Today</h3>\n<p>By completing this lab, you've successfully deployed the OpenTelemetry Collector to collect metrics, enrich metric attributes for better context, and ship those metrics to Dynatrace for analysis.</p>\n<ul>\n<li>One Community Contrib Distro OpenTelemetry Collector was deployed as a DaemonSet, behaving as an Agent running on each Node<ul>\n<li>The <code>kubeletstats</code> receiver scrapes metrics from the local kubelet on the Node</li>\n<li>The <code>k8sattributes</code> processor enriches the metrics with Kubernetes attributes that may be missing without it</li></ul></li>\n<li>A second Community Contrib Distro OpenTelemetry Collector was deployed as a Deployment, behaving as a Gateway<ul>\n<li>The <code>k8s_cluster</code> receiver queries the Kubernetes cluster API to retrieve metrics</li>\n<li>The <code>k8sattributes</code> processor enriches the metrics with Kubernetes attributes that may be missing without it</li>\n<li>The <code>otlp</code> receiver receives signals that are exported from agents, SDKs, and other Collectors</li></ul></li>\n<li>Metrics produced by the OpenTelemetry SDKs and Agents are exported to the <code>otlp</code> receiver</li>\n<li>Dynatrace DQL (via Notebooks) allows you to perform powerful queries and analysis of the metric data</li>\n</ul>","activityList":[]}]},{"id":"5","name":"OpenTelemetry Capstone","content":"<h2 id=\"opentelemetrycapstone\">OpenTelemetry Capstone</h2>\n<h3 id=\"whatyoulllearntoday\">What You’ll Learn Today</h3>\n<p>In this lab we'll utilize multiple OpenTelemetry Collectors to collect application traces/spans, log records, and metric data points generated by OpenTelemetry, from a Kubernetes cluster and ship them to Dynatrace.  This is a capstone lab that utilizes the concepts of the previous Kubernetes OpenTelemetry labs.</p>\n<p>Lab tasks:</p>\n<ol>\n<li>Deploy 4 OpenTelemetry Collectors</li>\n<li>Configure OpenTelemetry Collector service pipeline for data enrichment</li>\n<li>Analyze metrics, traces, and logs in Dynatrace</li>\n<li>Observe OpenTelemetry Collector health in Dynatrace</li>\n</ol>","activityList":[{"id":"5.1","name":"Prerequisites","content":"<h2 id=\"prerequisites\">Prerequisites</h2>\n<h3 id=\"importdashboardsintodynatrace\">Import Dashboards into Dynatrace</h3>\n<p><img src=\"assets/capstone-dt_astronomy_shop_dashboard.png\" alt=\"astronomy-shop dashboard\" />\n<a href=\"https://github.com/popecruzdt/opentelemetry-capstone/blob/code-spaces/opentelemetry-capstone_dt_dashboard.json\">astronomy-shop dashboard</a></p>\n<p><img src=\"assets/capstone-dt_collector_health_dashboard.png\" alt=\"collector health dashboard\" />\n<a href=\"https://github.com/popecruzdt/opentelemetry-capstone/blob/code-spaces/OpenTelemetry_Collector_%5BIsItObservable%5D_dt_dashboard.json\">collector health dashboard</a></p>\n<h3 id=\"defineworkshopuservariables\">Define workshop user variables</h3>\n<p>In your Github Codespaces Terminal:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">DT_ENDPOINT</span>=https://{your-environment-id}.live.dynatrace.com/api/v2/otlp\n<span class=\"hljs-builtin-name\">export</span> DT_API_TOKEN={your-api-token}\n<span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">NAME</span>=&lt;INITIALS&gt;-k8s-otel-o11y\n</code></pre>\n<h3 id=\"moveintothebasedirectory\">Move into the base directory</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\"><span class=\"hljs-built_in\">cd</span> -\n<span class=\"hljs-built_in\">cd</span> lab-modules/opentelemetry-capstone\n</code></pre>\n<h3 id=\"cleanuppreviousdeployments\">Clean Up Previous Deployments</h3>\n<p>Delete <code>dynatrace</code> namespace and all previous deployments</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl delete ns dynatrace\n</code></pre>\n<h3 id=\"deployopentelemetryoperator\">Deploy OpenTelemetry Operator</h3>\n<h3 id=\"createdynatracenamespace\">Create <code>dynatrace</code> namespace</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create namespace dynatrace\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/dynatrace created</p>\n</blockquote>\n<h3 id=\"createdynatraceotelcoldtapicredentialssecret\">Create <code>dynatrace-otelcol-dt-api-credentials</code> secret</h3>\n<p>The secret holds the API endpoint and API token that OpenTelemetry data will be sent to.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl create secret generic dynatrace-otelcol-dt-api-credentials --from-literal=DT_ENDPOINT=<span class=\"hljs-variable\">$DT_ENDPOINT</span> --from-literal=DT_API_TOKEN=<span class=\"hljs-variable\">$DT_API_TOKEN</span> -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>secret/dynatrace-otelcol-dt-api-credentials created</p>\n</blockquote>\n<h3 id=\"deploycertmanagerprerequisiteforopentelemetryoperator\">Deploy <code>cert-manager</code>, pre-requisite for <code>opentelemetry-operator</code></h3>\n<p>https://cert-manager.io/docs/installation/</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/cert-manager.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/cert-manager created\\\n  customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created\\\n  customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created</p>\n</blockquote>\n<p>Wait 30-60 seconds for cert-manager to finish initializing before continuing.</p>\n<h3 id=\"deployopentelemetryoperator-1\">Deploy <code>opentelemetry-operator</code></h3>\n<p>The OpenTelemetry Operator will deploy and manage the custom resource <code>OpenTelemetryCollector</code> deployed on the cluster.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/opentelemetry-operator.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>namespace/opentelemetry-operator-system created\\\n  customresourcedefinition.apiextensions.k8s.io/instrumentations.opentelemetry.io created\\\n  customresourcedefinition.apiextensions.k8s.io/opampbridges.opentelemetry.io created\\\n  …\\\n  validatingwebhookconfiguration.admissionregistration.k8s.io/opentelemetry-operator-validating-webhook-configuration configured</p>\n</blockquote>\n<p>Wait 30-60 seconds for opentelemetry-operator-controller-manager to finish initializing before continuing.</p>\n<p>Validate that the OpenTelemetry Operator components are running.</p>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n opentelemetry-operator-system\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>opentelemetry-operator-controller-manager-5d746dbd64-rf9st</td>\n<td>2/2</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"createclusterrolewithreadaccesstokubernetesobjects\">Create <code>clusterrole</code> with read access to Kubernetes objects</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole</span>\n<span class=\"hljs-attr\">rules:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;events&#x27;</span>, <span class=\"hljs-string\">&#x27;namespaces&#x27;</span>, <span class=\"hljs-string\">&#x27;namespaces/status&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/spec&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/stats&#x27;</span>, <span class=\"hljs-string\">&#x27;nodes/proxy&#x27;</span>, <span class=\"hljs-string\">&#x27;pods&#x27;</span>, <span class=\"hljs-string\">&#x27;pods/status&#x27;</span>, <span class=\"hljs-string\">&#x27;replicationcontrollers&#x27;</span>, <span class=\"hljs-string\">&#x27;replicationcontrollers/status&#x27;</span>, <span class=\"hljs-string\">&#x27;resourcequotas&#x27;</span>, <span class=\"hljs-string\">&#x27;services&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;apps&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;daemonsets&#x27;</span>, <span class=\"hljs-string\">&#x27;deployments&#x27;</span>, <span class=\"hljs-string\">&#x27;replicasets&#x27;</span>, <span class=\"hljs-string\">&#x27;statefulsets&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;extensions&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;daemonsets&#x27;</span>, <span class=\"hljs-string\">&#x27;deployments&#x27;</span>, <span class=\"hljs-string\">&#x27;replicasets&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;batch&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;jobs&#x27;</span>, <span class=\"hljs-string\">&#x27;cronjobs&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">apiGroups:</span> [<span class=\"hljs-string\">&#x27;autoscaling&#x27;</span>]\n    <span class=\"hljs-attr\">resources:</span> [<span class=\"hljs-string\">&#x27;horizontalpodautoscalers&#x27;</span>]\n    <span class=\"hljs-attr\">verbs:</span> [<span class=\"hljs-string\">&#x27;get&#x27;</span>, <span class=\"hljs-string\">&#x27;list&#x27;</span>, <span class=\"hljs-string\">&#x27;watch&#x27;</span>]\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrole.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole created</p>\n</blockquote>\n<h3 id=\"createclusterrolebindingforopentelemetrycollectorserviceaccounts\">Create <code>clusterrolebinding</code> for OpenTelemetry Collector service accounts</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRoleBinding</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole-crb</span>\n<span class=\"hljs-attr\">subjects:</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-deployment-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-daemonset-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">contrib-deployment-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ServiceAccount</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">contrib-daemonset-collector</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">roleRef:</span>\n  <span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ClusterRole</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">otel-collector-k8s-clusterrole</span>\n  <span class=\"hljs-attr\">apiGroup:</span> <span class=\"hljs-string\">rbac.authorization.k8s.io</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/rbac/otel-collector-k8s-clusterrole-crb.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>clusterrolebinding.rbac.authorization.k8s.io/otel-collector-k8s-clusterrole-crb created</p>\n</blockquote>","activityList":[]},{"id":"5.2","name":"Dynatrace Deployment Collector","content":"<h2 id=\"dynatracedeploymentcollector\">Dynatrace Deployment Collector</h2>\n<h3 id=\"opentelemetrycollectordynatracedistrodeployment\">OpenTelemetry Collector - Dynatrace Distro (Deployment)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>Receivers:\n<code>otlp</code>, <code>prometheus</code></p>\n<table>\n<thead>\n<tr>\n<th>MODULE</th>\n<th>DT DEPLOY</th>\n<th>DT DAEMON</th>\n<th>CON DEPLOY</th>\n<th>CON DAEMON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>otlp</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>prometheus</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>filelog</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>kubeletstats</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>k8s_cluster</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>k8sobjects</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deploycollector\">Deploy Collector</h3>\n<h3 id=\"deployopentelemetrycollectorcrd\">Deploy OpenTelemetry Collector CRD</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment#tabgroup--dynatrace-docs--gateway</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-deployment</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/dynatrace/otel-collector-dynatrace-deployment-crd.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-deployment created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-deployment-collector-796546fbd6-kqflf</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]},{"id":"5.3","name":"Dynatrace Daemonset Collector","content":"<h2 id=\"dynatracedaemonsetcollector\">Dynatrace Daemonset Collector</h2>\n<h3 id=\"opentelemetrycollectordynatracedistrodaemonset\">OpenTelemetry Collector - Dynatrace Distro (Daemonset)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>Receivers:\n<code>filelog</code>, <code>prometheus</code></p>\n<table>\n<thead>\n<tr>\n<th>MODULE</th>\n<th>DT DEPLOY</th>\n<th>DT DAEMON</th>\n<th>CON DEPLOY</th>\n<th>CON DAEMON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>otlp</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>prometheus</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>filelog</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>kubeletstats</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>k8s_cluster</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>k8sobjects</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deploycollector\">Deploy Collector</h3>\n<h3 id=\"deployopentelemetrycollectorcrd\">Deploy OpenTelemetry Collector CRD</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment#tabgroup--dynatrace-docs--agent</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-daemonset</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;daemonset&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/dynatrace/otel-collector-dynatrace-daemonset-crd.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/dynatrace-daemonset created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dynatrace-daemonset-collector-h69pz</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]},{"id":"5.4","name":"Contrib Deployment Collector","content":"<h2 id=\"contribdeploymentcollector\">Contrib Deployment Collector</h2>\n<h3 id=\"opentelemetrycollectorcontribdistrodeployment\">OpenTelemetry Collector - Contrib Distro (Deployment)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>Receivers:\n<code>otlp</code>, <code>prometheus</code>, <code>k8s_cluster</code>, <code>k8sobjects</code></p>\n<table>\n<thead>\n<tr>\n<th>MODULE</th>\n<th>DT DEPLOY</th>\n<th>DT DAEMON</th>\n<th>CON DEPLOY</th>\n<th>CON DAEMON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>otlp</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>prometheus</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>filelog</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>kubeletstats</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>k8s_cluster</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>k8sobjects</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deploycollector\">Deploy Collector</h3>\n<h3 id=\"deployopentelemetrycollectorcrd\">Deploy OpenTelemetry Collector CRD</h3>\n<p>https://opentelemetry.io/docs/kubernetes/operator/</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">contrib-deployment</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;deployment&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/contrib/otel-collector-contrib-deployment-crd.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/contrib-deployment created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contrib-deployment-collector-74dfc4d9f4-s97k6</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]},{"id":"5.5","name":"Contrib Daemonset Collector","content":"<h2 id=\"contribdaemonsetcollector\">Contrib Daemonset Collector</h2>\n<h3 id=\"opentelemetrycollectorcontribdistrodaemonset\">OpenTelemetry Collector - Contrib Distro (Daemonset)</h3>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/collector/deployment</p>\n<p>Receivers:\n<code>prometheus</code>, <code>kubeletstats</code></p>\n<table>\n<thead>\n<tr>\n<th>MODULE</th>\n<th>DT DEPLOY</th>\n<th>DT DAEMON</th>\n<th>CON DEPLOY</th>\n<th>CON DAEMON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>otlp</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>prometheus</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>filelog</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>kubeletstats</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n</tr>\n<tr>\n<td>k8s_cluster</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n<tr>\n<td>k8sobjects</td>\n<td>- [ ]</td>\n<td>- [ ]</td>\n<td>- [x]</td>\n<td>- [ ]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"deploycollector\">Deploy Collector</h3>\n<h3 id=\"deployopentelemetrycollectorcrd\">Deploy OpenTelemetry Collector CRD</h3>\n<p>https://opentelemetry.io/docs/kubernetes/operator/</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">contrib-daemonset</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">envFrom:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">secretRef:</span>\n      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">dynatrace-otelcol-dt-api-credentials</span>\n  <span class=\"hljs-attr\">mode:</span> <span class=\"hljs-string\">&quot;daemonset&quot;</span>\n  <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">&quot;otel/opentelemetry-collector-contrib:0.103.0&quot;</span>\n</code></pre>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl apply -f opentelemetry/collector/contrib/otel-collector-contrib-daemonset-crd.yaml\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>opentelemetrycollector.opentelemetry.io/contrib-daemonset created</p>\n</blockquote>\n<h3 id=\"validaterunningpods\">Validate running pod(s)</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">kubectl get pods -n dynatrace\n</code></pre>\n<p>Sample output:</p>\n<table>\n<thead>\n<tr>\n<th>NAME</th>\n<th>READY</th>\n<th>STATUS</th>\n<th>RESTARTS</th>\n<th>AGE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>contrib-daemonset-collector-d92tw</td>\n<td>1/1</td>\n<td>Running</td>\n<td>0</td>\n<td>1m</td>\n</tr>\n</tbody>\n</table>","activityList":[]},{"id":"5.6","name":"Export to OTLP Receiver","content":"<h2 id=\"exporttootlpreceiver\">Export to OTLP Receiver</h2>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">config:</span>\n    <span class=\"hljs-attr\">receivers:</span>\n      <span class=\"hljs-attr\">otlp:</span>\n        <span class=\"hljs-attr\">protocols:</span>\n          <span class=\"hljs-attr\">http:</span>\n            <span class=\"hljs-comment\"># Since this collector needs to receive data from the web, enable cors for all origins</span>\n            <span class=\"hljs-comment\"># `allowed_origins` can be refined for your deployment domain</span>\n            <span class=\"hljs-attr\">cors:</span>\n              <span class=\"hljs-attr\">allowed_origins:</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;http://*&quot;</span>\n                <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;https://*&quot;</span>\n      <span class=\"hljs-attr\">httpcheck/frontendproxy:</span>\n        <span class=\"hljs-attr\">targets:</span>\n          <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">&#x27;http://<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-frontendproxy:8080&#x27;</span>\n\n    <span class=\"hljs-attr\">exporters:</span>\n      <span class=\"hljs-comment\"># Dynatrace OTel Collector</span>\n      <span class=\"hljs-attr\">otlphttp/dynatrace:</span>\n        <span class=\"hljs-attr\">endpoint:</span> <span class=\"hljs-string\">http://dynatrace-deployment-collector.dynatrace.svc.cluster.local:4318</span>\n\n    <span class=\"hljs-attr\">processors:</span>\n      <span class=\"hljs-attr\">resource:</span>\n        <span class=\"hljs-attr\">attributes:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">service.instance.id</span>\n          <span class=\"hljs-attr\">from_attribute:</span> <span class=\"hljs-string\">k8s.pod.uid</span>\n          <span class=\"hljs-attr\">action:</span> <span class=\"hljs-string\">insert</span>\n\n    <span class=\"hljs-attr\">connectors:</span>\n      <span class=\"hljs-attr\">spanmetrics:</span> {}\n\n    <span class=\"hljs-attr\">service:</span>\n      <span class=\"hljs-attr\">pipelines:</span>\n        <span class=\"hljs-attr\">traces:</span>\n          <span class=\"hljs-attr\">receivers:</span> [<span class=\"hljs-string\">otlp</span>]\n          <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">memory_limiter</span>, <span class=\"hljs-string\">resource</span>, <span class=\"hljs-string\">batch</span>]\n          <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">spanmetrics</span>, <span class=\"hljs-string\">otlphttp/dynatrace</span>]\n        <span class=\"hljs-attr\">metrics:</span>\n          <span class=\"hljs-attr\">receivers:</span> [<span class=\"hljs-string\">httpcheck/frontendproxy</span>, <span class=\"hljs-string\">otlp</span>, <span class=\"hljs-string\">spanmetrics</span>]\n          <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">memory_limiter</span>, <span class=\"hljs-string\">resource</span>, <span class=\"hljs-string\">batch</span>]\n          <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">otlphttp/dynatrace</span>]\n        <span class=\"hljs-attr\">logs:</span>\n          <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">memory_limiter</span>, <span class=\"hljs-string\">resource</span>, <span class=\"hljs-string\">batch</span>]\n          <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">otlphttp/dynatrace</span>]\n</code></pre>\n<h3 id=\"exporttootlpreceiver-1\">Export to OTLP Receiver</h3>\n<h3 id=\"exportopentelemetrydatafromastronomyshoptoopentelemetrycollectordynatracedistrodeployment\">Export OpenTelemetry data from <code>astronomy-shop</code> to OpenTelemetry Collector - Dynatrace Distro (Deployment)</h3>\n<h3 id=\"customizeastronomyshophelmvalues\">Customize astronomy-shop helm values</h3>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">default:</span>\n  <span class=\"hljs-comment\"># List of environment variables applied to all components</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_SERVICE_NAME</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">&quot;metadata.labels[&#x27;app.kubernetes.io/component&#x27;]&quot;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_COLLECTOR_NAME</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;<span class=\"hljs-template-variable\">{{ include &quot;otel-demo.name&quot; . }}</span>-otelcol&#x27;</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">cumulative</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">OTEL_RESOURCE_ATTRIBUTES</span>\n      <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&#x27;service.name=$(OTEL_SERVICE_NAME),service.namespace=NAME_TO_REPLACE,service.version=<span class=\"hljs-template-variable\">{{ .Chart.AppVersion }}</span>&#x27;</span>\n</code></pre>\n<blockquote>\n  <p>service.namespace=NAME<em>TO</em>REPLACE\\\n  service.namespace=INITIALS-k8s-otel-o11y</p>\n</blockquote>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">sed -i <span class=\"hljs-string\">&quot;s,NAME_TO_REPLACE,<span class=\"hljs-variable\">$NAME</span>,&quot;</span> astronomy-shop/collector-values.yaml\n</code></pre>\n<h3 id=\"updateastronomyshopopentelemetrycollectorexportendpointviahelm\">Update <code>astronomy-shop</code> OpenTelemetry Collector export endpoint via helm</h3>\n<p>Command:</p>\n<pre><code class=\"hljs sh language-sh\">helm upgrade astronomy-shop open-telemetry/opentelemetry-demo --values astronomy-shop/collector-values.yaml --namespace astronomy-shop --version <span class=\"hljs-string\">&quot;0.31.0&quot;</span>\n</code></pre>\n<p>Sample output:</p>\n<blockquote>\n  <p>NAME: astronomy-shop\\\n  LAST DEPLOYED: Thu Jun 27 20:58:38 2024\\\n  NAMESPACE: astronomy-shop\\\n  STATUS: deployed\\\n  REVISION: 2</p>\n</blockquote>\n<h3 id=\"analyzedataindynatrace\">Analyze Data in Dynatrace</h3>\n<h3 id=\"analyzemetricstracesandlogsindynatracedashboard\">Analyze metrics, traces, and logs in Dynatrace dashboard</h3>\n<p><img src=\"assets/capstone-dt_astronomy_shop_dashboard.png\" alt=\"astronomy-shop dashboard\" />\n<a href=\"https://github.com/popecruzdt/opentelemetry-capstone/blob/code-spaces/opentelemetry-capstone_dt_dashboard.json\">astronomy-shop dashboard</a></p>","activityList":[]},{"id":"5.7","name":"OpenTelemetry Collector Health","content":"<h2 id=\"opentelemetrycollectorhealth\">OpenTelemetry Collector Health</h2>\n<h3 id=\"observeopentelemetrycollectorhealthindynatrace\">Observe OpenTelemetry Collector health in Dynatrace</h3>\n<p>https://opentelemetry.io/docs/collector/internal-telemetry/</p>\n<ul>\n<li>Add <code>dynatrace.otel.collector</code> to Dynatrace's metric attribute allow list</li>\n<li>Enable OpenTelemetry Collector health metrics (Prometheus)</li>\n<li>Modify OpenTelemetry Collector health metrics for Dynatrace support</li>\n<li>View OpenTelemetry Collector health metrics in Dynatrace</li>\n</ul>\n<h3 id=\"adddynatraceotelcollectortodynatracesmetricattributeallowlist\">Add <code>dynatrace.otel.collector</code> to Dynatrace's metric attribute allow list</h3>\n<p>By default, the metric attribute <code>dynatrace.otel.collector</code> is dropped by Dynatrace.  Add it to the allow list in your Dynatrace tenant:</p>\n<p>https://docs.dynatrace.com/docs/extend-dynatrace/opentelemetry/getting-started/metrics/configuration\n<img src=\"assets/capstone-dt_otelmetrics_add_collector_attribute.png\" alt=\"dt otel metrics add collector attribute\" /></p>\n<h3 id=\"enableopentelemetrycollectorhealthmetricsprometheus\">Enable OpenTelemetry Collector health metrics (Prometheus)</h3>\n<p>Enable metric generation for Collector CRD:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">observability:</span>\n    <span class=\"hljs-attr\">metrics:</span>\n      <span class=\"hljs-attr\">enableMetrics:</span> <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Enable publishing of metric generation to Prometheus endpoint:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">env:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">MY_POD_IP</span>\n      <span class=\"hljs-attr\">valueFrom:</span>\n        <span class=\"hljs-attr\">fieldRef:</span>\n          <span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n          <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">status.podIP</span>\n  <span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n</span>\n    <span class=\"hljs-attr\">processors:</span>\n\n    <span class=\"hljs-attr\">exporters:</span>\n\n    <span class=\"hljs-attr\">service:</span>\n      <span class=\"hljs-attr\">telemetry:</span>\n        <span class=\"hljs-attr\">metrics:</span>\n          <span class=\"hljs-attr\">level:</span> <span class=\"hljs-string\">&quot;normal&quot;</span>\n          <span class=\"hljs-attr\">address:</span> <span class=\"hljs-string\">${MY_POD_IP}:8888</span>\n</code></pre>\n<p>Enable scraping of metrics from Prometheus endpoint:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">opentelemetry.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">OpenTelemetryCollector</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">dynatrace</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">config:</span> <span class=\"hljs-string\">|\n    receivers:\n      prometheus:\n        config:\n          scrape_configs:\n          - job_name: opentelemetry-collector\n            scrape_interval: 30s\n            static_configs:\n            - targets:\n              - ${MY_POD_IP}:8888\n</span>\n    <span class=\"hljs-attr\">processors:</span>\n      <span class=\"hljs-attr\">batch:</span>\n\n    <span class=\"hljs-attr\">exporters:</span>\n      <span class=\"hljs-attr\">otlphttp/dynatrace:</span>\n\n    <span class=\"hljs-attr\">service:</span>\n      <span class=\"hljs-attr\">pipelines:</span>\n        <span class=\"hljs-attr\">metrics:</span>\n          <span class=\"hljs-attr\">receivers:</span> [<span class=\"hljs-string\">prometheus</span>]\n          <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">batch</span>]\n          <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">otlphttp/dynatrace</span>]\n</code></pre>\n<h3 id=\"modifyopentelemetrycollectorhealthmetricsfordynatracesupport\">Modify OpenTelemetry Collector health metrics for Dynatrace support</h3>\n<p>Specific metric types are supported by Dynatrace:</p>\n<p>https://docs.dynatrace.com/docs/platform-modules/infrastructure-monitoring/container-platform-monitoring/kubernetes-monitoring/monitor-prometheus-metrics#usage</p>\n<p>Convert unsupported cumulative sum metric types to delta type for Dynatrace support:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n  <span class=\"hljs-attr\">cumulativetodelta:</span> {}\n<span class=\"hljs-attr\">service:</span>\n  <span class=\"hljs-attr\">pipelines:</span>\n  <span class=\"hljs-attr\">metrics:</span>\n    <span class=\"hljs-attr\">receivers:</span> [<span class=\"hljs-string\">prometheus</span>]\n    <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">cumulativetodelta</span>,<span class=\"hljs-string\">batch</span>]\n    <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">otlphttp/dynatrace</span>]\n</code></pre>\n<p>Filter out (remove) unsupported histogram metric types for Dynatrace support:</p>\n<pre><code class=\"hljs yaml language-yaml\"><span class=\"hljs-attr\">processors:</span>\n  <span class=\"hljs-attr\">filter/histogram:</span>\n    <span class=\"hljs-attr\">error_mode:</span> <span class=\"hljs-string\">ignore</span>\n    <span class=\"hljs-attr\">metrics:</span>\n      <span class=\"hljs-attr\">metric:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;type == METRIC_DATA_TYPE_HISTOGRAM&#x27;</span>\n\n<span class=\"hljs-attr\">service:</span>\n  <span class=\"hljs-attr\">pipelines:</span>\n  <span class=\"hljs-attr\">metrics:</span>\n    <span class=\"hljs-attr\">receivers:</span> [<span class=\"hljs-string\">prometheus</span>]\n    <span class=\"hljs-attr\">processors:</span> [<span class=\"hljs-string\">filter/histogram</span>,<span class=\"hljs-string\">batch</span>]\n    <span class=\"hljs-attr\">exporters:</span> [<span class=\"hljs-string\">otlphttp/dynatrace</span>]\n</code></pre>\n<h3 id=\"viewopentelemetrycollectorhealthmetricsindynatrace\">View OpenTelemetry Collector health metrics in Dynatrace</h3>\n<p>Prometheus metrics from the OpenTelemetry Collector have the <code>otelcol_</code> prefix and can be found in the Dynatrace metric browser:\n<img src=\"assets/capstone-dt_otelcol_metric_list.png\" alt=\"dt_otelcol_metric_list\" /></p>\n<p>Example dashboard for OpenTelemetry Collector health has been created by the <code>IsItObservable</code> team:\n<img src=\"assets/capstone-dt_collector_health_dashboard_short.png\" alt=\"dt_collector_health_dashboard_short\" /></p>\n<p><a href=\"https://youtu.be/Qxt3XAMJNhA?si=LY_37zRJC8hCTpjX&t=2630\">YouTube Video</a></p>","activityList":[]},{"id":"5.8","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"whatyoulearnedtoday\">What You Learned Today</h3>\n<p>By completing this lab, you've successfully deployed the OpenTelemetry Collector to collect metrics, traces, and logs from Kubernetes and ship them to Dynatrace for analysis.</p>\n<ul>\n<li>The Dynatrace Distro of OpenTelemetry Collector includes supported modules needed to ship telemetry to Dynatrace<ul>\n<li>The <code>otlp</code> receiver receives metrics, traces, and logs from OpenTelemetry exporters via gRPC/HTTP</li>\n<li>The <code>filelog</code> receiver scrapes logs from the Node filesystem and parses the contents</li>\n<li>The <code>prometheus</code> receiver scrapes metric data exposed by Pod Prometheus endpoints</li></ul></li>\n<li>The Contrib Distro of OpenTelemetry Collector includes additional modules needed to ship telemetry to Dynatrace<ul>\n<li>The <code>kubeletstats</code> receiver scrapes metrics from the local kubelet on the Node</li>\n<li>The <code>k8s_cluster</code> receiver queries the Kubernetes cluster API to retrieve metrics</li>\n<li>The <code>k8sobjects</code> receiver watches for Kubernetes events (and other resources) on the cluster</li></ul></li>\n<li>Dynatrace allows you to perform powerful queries and analysis of the telemetry data</li>\n<li>Observing the health of the OpenTelemetry Collectors and data pipeline is critical<ul>\n<li>The OpenTelemetry Collector exposes self-monitoring metrics in Prometheus format</li></ul></li>\n</ul>","activityList":[]}]},{"id":"6","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<h3 id=\"summary\">Summary</h3>\n<p>OpenTelemetry is a powerful observability framework that can be used to monitor the health of Kubernetes clusters and containerized workloads.</p>\n<p>Instrumentation: OpenTelemetry provides libraries and agents to instrument your Kubernetes applications. This means adding code to your applications to collect telemetry data such as traces, metrics, and logs.</p>\n<p>Data Collection: Once instrumented, OpenTelemetry collects telemetry data from your applications running in the Kubernetes cluster. This data includes information about application performance, resource usage, and error rates.</p>\n<p>Exporters: OpenTelemetry supports various exporters to send the collected telemetry data to different backends for analysis. Using the OpenTelemetry Collector is the preferred approach to shipping this data to Dynatrace.</p>\n<p>Visualization and Analysis: By exporting telemetry data to Dynatrace, you can visualize and analyze the health of your Kubernetes cluster. For example, you can use DQL to create dashboards that display metrics like CPU usage, memory consumption, and request latency.</p>\n<p>Alerting: With the collected data, you can set up alerts to notify you of any issues in your Kubernetes cluster. For instance, you can configure alerts for high error rates or resource exhaustion.</p>\n<p>By using OpenTelemetry in this way, you can gain deep insights into the performance and health of your Kubernetes clusters, helping you to identify and resolve issues more effectively.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://docs.dynatrace.com/docs/ingest-from/opentelemetry\">Dynatrace OpenTelemetry</a></p>\n<p><a href=\"https://docs.dynatrace.com/docs/ingest-from/opentelemetry/collector\">Dynatrace OpenTelemetry Collector</a></p>\n<p><a href=\"https://docs.dynatrace.com/docs/ingest-from/opentelemetry/collector/use-cases\">Dynatrace OpenTelemetry Collector Use Cases</a></p>\n<p><a href=\"https://opentelemetry.io/docs/demo/\">OpenTelemetry Demo Astronomy Shop</a></p>","activityList":[]}]